"""Type stubs for Rust bindings"""

from typing import List, Tuple

class Simplex:
    """A simplex with vertices"""
    def __init__(self, vertices: List[int]) -> None: ...
    def dimension(self) -> int: ...
    def vertices(self) -> List[int]: ...
    def __repr__(self) -> str: ...

class SimplicialComplex:
    """A simplicial complex"""
    def __init__(self) -> None: ...
    def add_simplex(self, vertices: List[int]) -> None: ...
    def dimension(self) -> int: ...
    def euler_characteristic(self) -> int: ...
    def verify_closure(self) -> bool: ...
    def __repr__(self) -> str: ...

class PersistenceDiagram:
    """A persistence diagram"""
    def dimension(self) -> int: ...
    def points(self) -> List[Tuple[float, float, int]]: ...
    def betti_number(self) -> int: ...
    def significant_points(self, threshold: float) -> List[Tuple[float, float, int]]: ...
    def __repr__(self) -> str: ...

