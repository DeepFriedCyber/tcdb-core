name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  rust-test:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      working-directory: ./rust
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: ./rust
    
    - name: Build
      run: cargo build --verbose --release
      working-directory: ./rust
    
    - name: Run tests
      run: cargo test --verbose --release
      working-directory: ./rust
    
    - name: Run benchmarks (dry run)
      run: cargo bench --no-run
      working-directory: ./rust
      if: matrix.rust == 'stable'

  python-test:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin pytest pytest-cov black ruff
    
    - name: Build Python bindings
      run: maturin develop --release
    
    - name: Run Python tests
      run: python test_python.py
    
    - name: Check formatting (black)
      run: black --check python/ examples/
      if: matrix.python-version == '3.11'
    
    - name: Lint (ruff)
      run: ruff check python/ examples/
      if: matrix.python-version == '3.11'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-test, python-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin
        pip install -e ".[dev]"
    
    - name: Build
      run: maturin develop --release
    
    - name: Run integration tests
      run: |
        cd rust
        cargo test --test integration_test --release
    
    - name: Run examples
      run: |
        python examples/basic_usage.py
        python examples/rips_complex.py

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      working-directory: ./rust
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./rust/lcov.info
        fail_ci_if_error: false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
      working-directory: ./rust
      continue-on-error: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build Rust docs
      run: cargo doc --no-deps --all-features
      working-directory: ./rust
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install maturin pdoc
        maturin develop --release
    
    - name: Build Python docs
      run: pdoc tcdb_api --html --output-dir docs
      working-directory: ./python
      continue-on-error: true

  build-wheels:
    name: Build Wheels
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build wheels
      run: maturin build --release
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: target/wheels/*.whl

